extends layout
block variables
    - var title = 'Station readings'

block content


  div.station-container
    div.recent
      p= 'It has rained ' + total_values + 'mm since ' + minDate
    div.recent
      p= 'The last time is rained was ' + maxDate + ' at ' + maxTime

    div.title
      h3 Rainfall (Tipping Bucket Raingauge) in mm every 15 minutes (total)
      h4= 'From ' + minDate + ' to ' + maxdate

    div.graph
    

    script.
      var width=window.innerWidth * 0.75;
      var height=window.innerHeight * 0.6;

      var margin = {top: 20, right: 20, bottom: 50, left: 40}
      var svg = d3.select(".graph")
        .append("svg")
        .attr('height', height)
        .attr('width', width)
        .append("g")
        .attr("transform",
              "translate(" + margin.left + "," + margin.top + ")");;

      var read = !{JSON.stringify(readings)};

      // parse the date / time
      var parseTime = d3.utcParse("%Y-%m-%dT%H:%M:%S%Z")

      // set the ranges
      var x = d3.scaleTime().range([0, width - (margin.left + margin.right)]);
      var y = d3.scaleLinear().range([height - (margin.top + margin.bottom), 0]);
      var dot = d3.scaleLinear().range([1,30]);

      // define the line
      var valueline = d3.line()
          .x(function(d) { return x(d.dateTime); })
          .y(function(d) { return y(d.value); });

      var data = read;
      data.forEach(function(d) {
          d.dateTime = parseTime(d.dateTime);
          d.value = +d.value;
      });

      // Scale the range of the data
      x.domain(d3.extent(data, function(d) { return d.dateTime; }));
      y.domain([0, d3.max(data, function(d) { return d.value; })]);
      dot.domain([0, d3.max(data, function(d) { return d.value; })]);

      // Add the scatterplot
      svg.selectAll("dot")
          .data(data)
          .enter().append("circle")
            .attr("r", function(d) { return dot(d.value/2); })
            .attr("class", "point")
            .attr("cx", function(d) { return x(d.dateTime); })
            .attr("cy", function(d) { return y(d.value); });

      // Add the x Axis
      var xPosition = height - (margin.top + margin.bottom)
      svg.append("g")
          .attr('class','axis')
          .attr("transform", "translate(0," + xPosition + ")")
          .call(d3.axisBottom(x).ticks(5));

      // Add the y Axis
      svg.append("g")
          .attr('class','axis')
          .call(d3.axisLeft(y));

    div.attribution
      p Source: This uses Environment Agency flood and river level data from the real-time data API (Beta)

  script(src='../javascripts/interactive.js')
